@page "/order/display/{Id:int}"
@page "/order/display"

@inject IGetOrderStrategy getOrderStrategy
@inject IPlaceOrderStrategy placeOrderStrategy
@inject IDeleteOrderStrategy deleteOrderStrategy
@inject IFoodsRepo foodsRepo

@inject NavigationManager navManager

@using BlazorServerWeb.Models

<h3>Display</h3>

@if (recordNotFound == true)
{
    <h4>Sorry, record not found</h4>
}
else if (order is null)
{
    <h4>Record loading...</h4>
}
else
{
    <table class="table">
        <tbody>
            <tr>
                <td><strong>Order name</strong></td>
                <td>@order.OrderName</td>
            </tr>
            <tr>
                <td><strong>Order date</strong></td>
                <td>@order.OrderDate</td>
            </tr>
            <tr>
                <td><strong>Food</strong></td>
                <td>@itemPurchased.Title</td>
            </tr>
            <tr>
                <td><strong>Quantity</strong></td>
                <td>@order.Quantity</td>
            </tr>
            <tr>
                <td><strong>Total</strong></td>
                <td>@String.Format("{0:C}", order.Total)</td>
            </tr>
            <tr>
                <td colspan="2">
                    @if (confirmDelete == true)
                    {
                        <button class="btn btn-outline-danger" @onclick="HandleDeleteOrder">Confirm delete</button>
                        <button class="btn btn-secondary" @onclick="(() => confirmDelete = false)">Cancel</button>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="(() => confirmDelete = true)">Delete order</button>
                    }
                </td>
            </tr>
        </tbody>
    </table>

    <EditForm Model="@updateOrder" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary Model="@updateOrder" />

        <div class="form-group">
            <label class="control-label">Update order name</label>
            <InputText @bind-Value="@updateOrder.OrderName" class="form-control" />
            <ValidationMessage For="(() => updateOrder.OrderName)" class="text-danger" />
        </div>

        <div class="form-group">
            <input type="submit" value="Update order" class="btn btn-dark" />
        </div>
    </EditForm>
}


@code {

    [Parameter]
    public int Id { get; set; }

    private OrderModel order;
    private FoodModel itemPurchased;
    private OrderUpdateModel updateOrder = new OrderUpdateModel();

    private bool confirmDelete = false;
    private bool recordNotFound = false;

    protected override async Task OnInitializedAsync()
    {
        order = await getOrderStrategy.Get(Id);

        if (order != null)
        {
            itemPurchased = await foodsRepo.GetById(order.FoodId);

            updateOrder.Id = order.Id;
            updateOrder.OrderName = order.OrderName;
        }
        else
        {
            recordNotFound = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        await placeOrderStrategy.UpdateOrderName(updateOrder.Id, updateOrder.OrderName);

        order.OrderName = updateOrder.OrderName;
    }

    private async Task HandleDeleteOrder()
    {
        await deleteOrderStrategy.Delete(Id);

        navManager.NavigateTo($"/food/list");
    }
}
